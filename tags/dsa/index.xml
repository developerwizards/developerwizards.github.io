<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>DSA - Tag - Amardeep&#39;s Blog</title>
        <link>https://www.thedevwizard.in/tags/dsa/</link>
        <description>DSA - Tag - Amardeep&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>amardeepg35@gmail.com (Amardeep Gupta)</managingEditor>
            <webMaster>amardeepg35@gmail.com (Amardeep Gupta)</webMaster><lastBuildDate>Wed, 06 Nov 2024 09:19:33 &#43;0530</lastBuildDate><atom:link href="https://www.thedevwizard.in/tags/dsa/" rel="self" type="application/rss+xml" /><item>
    <title>Understanding Big O Notation: A Beginner’s Guide</title>
    <link>https://www.thedevwizard.in/analysis-of-algorithms-big-o-notations/</link>
    <pubDate>Wed, 06 Nov 2024 09:19:33 &#43;0530</pubDate>
    <author>Amardeep Gupta</author>
    <guid>https://www.thedevwizard.in/analysis-of-algorithms-big-o-notations/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/aoa_prod.png" referrerpolicy="no-referrer">
            </div>Introduction to Big O Notation When analyzing the efficiency of algorithms, it&rsquo;s crucial to understand how well they scale with larger input sizes. That&rsquo;s where Big O Notation comes into play. Big O Notation provides a way to express an algorithm&rsquo;s time complexity, allowing us to compare different algorithms based on how they perform as inputs grow. In this blog, we&rsquo;ll explore Big O, its importance, and examples of common complexities.]]></description>
</item>
<item>
    <title>Introduction to DSA</title>
    <link>https://www.thedevwizard.in/intro-to-dsa-using-python/</link>
    <pubDate>Sun, 03 Nov 2024 21:16:11 &#43;0530</pubDate>
    <author>Amardeep Gupta</author>
    <guid>https://www.thedevwizard.in/intro-to-dsa-using-python/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/svg/DSA.svg" referrerpolicy="no-referrer">
            </div>Introduction to Data Structures and Algorithms (DSA) As a data engineer, you&rsquo;re likely familiar with handling vast amounts of data, optimizing workflows, and building efficient data pipelines. But a solid understanding of Data Structures and Algorithms (DSA) can take your skills to the next level, equipping you with the tools to build more performant systems, optimize resource usage, and make data processing more efficient.
Data Structures and Algorithms aren’t just theoretical concepts — they’re the backbone of efficient problem-solving and critical for scalable, optimized solutions in real-world applications.]]></description>
</item>
</channel>
</rss>
